#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>

// Stack structure
#define MAX_STACK_SIZE 100
typedef struct {
    int top;
    int items[MAX_STACK_SIZE];
} Stack;

// Function prototypes
void push(Stack *stack, int item);
int pop(Stack *stack);
int isEmpty(Stack *stack);
int isOperator(char c);
int precedence(char c);
void infixToPostfix(char *infix, char *postfix);
int evaluatePostfix(char *postfix);

void readFromFile(char *filename, char expressions[][100], int *numExpressions);
void printExpressions(char expressions[][100], int numExpressions);
void saveToFile(char *filename, char *postfix, int result);

int main() {
    Stack stack;
    stack.top = -1;

    char expressions[100][100];
    int numExpressions = 0;

    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Read equations from input.txt\n");
        printf("2. Print equations\n");
        printf("3. Evaluate using Expression tree\n");
        printf("4. Print postfix expressions\n");
        printf("5. Save to output file (postfix and results)\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                readFromFile("input.txt", expressions, &numExpressions);
                printf("Read %d equations from input.txt\n", numExpressions);
                break;
            case 2:
                printExpressions(expressions, numExpressions);
                break;
            case 3:
                for (int i = 0; i < numExpressions; i++) {
                    char postfix[100];
                    infixToPostfix(expressions[i], postfix);
                    printf("Result: %d\n", evaluatePostfix(postfix));
                }
                break;
            case 4:
                for (int i = 0; i < numExpressions; i++) {
                    char postfix[100];
                    infixToPostfix(expressions[i], postfix);
                    printf("Postfix expression: %s\n", postfix);
                }
                break;
            case 5:
    if (numExpressions == 0) {
        printf("No expressions available. Please read equations from input.txt first.\n");
        break;
    }

    // Save to output file for all expressions
    FILE *outputFile = fopen("output.txt", "a");
    if (outputFile == NULL) {
        printf("Error opening output file: output.txt\n");
        exit(1);
    }

    for (int i = 0; i < numExpressions; i++) {
        char postfix[100];
        infixToPostfix(expressions[i], postfix);
        int result = evaluatePostfix(postfix);

        // Save to output file
        fprintf(outputFile, "Expression: %s\n", expressions[i]);
        fprintf(outputFile, "Postfix expression: %s\n", postfix);
        fprintf(outputFile, "Result: %d\n", result);
        fprintf(outputFile, "--------------------------\n");
    }

    fclose(outputFile);
    printf("Results saved to output.txt\n");
    break;

            case 6:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}

void push(Stack *stack, int item) {
    if (stack->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack->items[++stack->top] = item;
}

int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        exit(1);
    }
    return stack->items[stack->top--];
}

int isEmpty(Stack *stack) {
    return stack->top == -1;
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '%');
}

int precedence(char c) {
    if (c == '+' || c == '-')
        return 1;
    else if (c == '*' || c == '/' || c == '%')
        return 2;
    else
        return 0;
}

void infixToPostfix(char *infix, char *postfix) {
    Stack stack;
    stack.top = -1;
    int i, j = 0;

    for (i = 0; infix[i] != '\0'; i++) {
        char c = infix[i];

        if (isspace(c)) {
            continue;  // Ignore spaces
        } else if (isdigit(c)) {
            int operand = 0;
            while (isdigit(infix[i])) {
                operand = operand * 10 + (infix[i] - '0');
                i++;
            }
            i--; // Adjust the index after the number
            j += sprintf(postfix + j, "%d ", operand);
        } else if (isOperator(c)) {
            postfix[j++] = ' ';  // Add space before operators
            while (!isEmpty(&stack) && precedence(stack.items[stack.top]) >= precedence(c)) {
                postfix[j++] = pop(&stack);
                postfix[j++] = ' ';  // Add space between operators
            }
            push(&stack, c);
        } else if (c == '(') {
            push(&stack, c);
        } else if (c == ')') {
            while (!isEmpty(&stack) && stack.items[stack.top] != '(') {
                postfix[j++] = ' ';
                postfix[j++] = pop(&stack);
                postfix[j++] = ' ';  // Add space between operators
            }
            pop(&stack); // Pop the opening parenthesis
        } else {
            // If it's not a space, digit, or operator, assume it's part of the expression
            postfix[j++] = c;
        }
    }

    while (!isEmpty(&stack)) {
        postfix[j++] = ' ';
        postfix[j++] = pop(&stack);
        postfix[j++] = ' ';  // Add space between operators
    }

    postfix[j] = '\0';
}




int evaluatePostfix(char *postfix) {
    Stack stack;
    stack.top = -1;
    int i, operand, operand1, operand2;

    for (i = 0; postfix[i] != '\0'; i++) {
        char c = postfix[i];

        if (isdigit(c)) {
            operand = 0;
            while (isdigit(postfix[i])) {
                operand = operand * 10 + (postfix[i] - '0');
                i++;
            }
            push(&stack, operand);
        } else if (isOperator(c)) {
            operand2 = pop(&stack);
            operand1 = pop(&stack);

            switch (c) {
                case '+':
                    push(&stack, operand1 + operand2);
                    break;
                case '-':
                    push(&stack, operand1 - operand2);
                    break;
                case '*':
                    push(&stack, operand1 * operand2);
                    break;
                case '/':
                    if (operand2 != 0) {
                        push(&stack, operand1 / operand2);
                    } else {
                        printf("Error: Division by zero\n");
                        exit(1);
                    }
                    break;
                case '%':
                    if (operand2 != 0) {
                        push(&stack, operand1 % operand2);
                    } else {
                        printf("Error: Modulus by zero\n");
                        exit(1);
                    }
                    break;
            }
        }
    }

    return pop(&stack);
}

void readFromFile(char *filename, char expressions[][100], int *numExpressions) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file: %s\n", filename);
        exit(1);
    }

    *numExpressions = 0;
    while (fscanf(file, " %[^\n]s", expressions[*numExpressions]) != EOF) {
        (*numExpressions)++;
    }

    fclose(file);
}

void printExpressions(char expressions[][100], int numExpressions) {
    printf("Expressions in the file:\n");
    for (int i = 0; i < numExpressions; i++) {
        printf("%d. %s\n", i + 1, expressions[i]);
    }
}

void saveToFile(char *filename, char *postfix, int result) {
    FILE *file = fopen(filename, "a");
    if (file == NULL) {
        printf("Error opening file: %s\n", filename);
        exit(1);
    }

    fprintf(file, "Postfix expression: %s\n", postfix);
    fprintf(file, "Result: %d\n", result);
    fprintf(file, "--------------------------\n");

    fclose(file);
}

